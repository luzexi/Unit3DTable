using System;
using System.Collections.Generic;
using System.Collections;
using System.Data;
//using System.Data.Odbc;
using System.IO;
using System.Text;

namespace ClientExcelExporter
{
    //this for text
    class ClientMultiLanguageTextExporter
    {
        public static void ExportMLTextFiles(string[] textFileNames, string[] SheetName, string outPath,string outCodeFilePath)
        {
            try
            {
                Console.WriteLine("Start Export ML Text File!");

                DataTable allStringData = new DataTable();
                for (int i = 0; i < textFileNames.Length; i++)
                {
                    if (SheetName.Length <= i)
                        Console.WriteLine("Sheet input wrong!");

                    Console.WriteLine("textFileNames[i] " + textFileNames[i] + " - " + SheetName[i]);
                    SingleExcelExport.ReadXLS(textFileNames[i] + ".xls", SheetName[i]);

                    for (int j = 0; j < SingleExcelExport.dtData.Columns.Count; j++)
                    {
                        SingleExcelExport.dtData.Columns[j].MaxLength = Int32.MaxValue;
                    }

                    if (i == 0)
                        allStringData = SingleExcelExport.dtData.Copy();
                    else
                    {
                        for (int j = 0; j < SingleExcelExport.dtData.Rows.Count; j++)
                        {
                            // Console.WriteLine("SingleExcelExport.dtData.Rows.Count is " + SingleExcelExport.dtData.Rows.Count);
                            // Console.WriteLine("j is " + j);
                            // Console.WriteLine("SingleExcelExport.dtData.Rows[j][0] is "+ SingleExcelExport.dtData.Rows[j][0].ToString());
                            // Console.WriteLine("SingleExcelExport.dtData.Rows[j][1] is " + SingleExcelExport.dtData.Rows[j][1].ToString());
                            allStringData.Rows.Add(SingleExcelExport.dtData.Rows[j].ItemArray);
                        }
                    }

                }
                
                int length = allStringData.Rows.Count;
                Console.WriteLine("Multi text file Length is " + length.ToString());

                //export head
                Console.WriteLine("Exporting HEAD!" + " !");
                ExportOneLanguageData(allStringData, "TEXT_HEAD", 0, outPath, outCodeFilePath);

                //export text data, use one header, notice all header of files should be same
                string[] ColHeaders = SingleExcelExport.GetColumnHeader();//still has last table's head
                for (int i = 0; i < ColHeaders.Length; i++)
                {
                    Console.WriteLine("Exporting " + ColHeaders[i] + " !");
                    ExportOneLanguageData(allStringData, ColHeaders[i], i + 1, outPath, outCodeFilePath);
                }

                Console.WriteLine("End Export ML Text File!");
            }
            catch (Exception exception)
            {
                Console.WriteLine(exception.Message);
            }
        }

        public static void ExportOneLanguageData(DataTable dataInput, string LanguageName, int Column, string outPath, string outCodeFilePath)
        {
            string filetowrite = outPath + LanguageName + ".bytes";

            int colStart, colEnd, rowStart, rowEnd;
            colStart = Column;
            colEnd = Column;
            rowStart = 0;
            rowEnd = dataInput.Rows.Count - 1;

            try
            {
                FileStream fs = new FileStream(filetowrite, FileMode.Create);
                BinaryWriter bw = new BinaryWriter(fs, Encoding.Unicode);
                bw.Write(dataInput.Rows.Count);
                for (int i = rowStart; i <= rowEnd; i++)
                {
                    for (int j = colStart; j <= colEnd; j++)
                    {
                        bw.Write(dataInput.Rows[i][j].ToString());
                    }
                }
                bw.Close();
                fs.Close();
            }
            catch (IOException exception)
            {
                Console.WriteLine(exception.Message);
            }

            // export text define file
            string filename = outCodeFilePath + "TextDefine.cs";
            //string[] headers = SingleExcelExport.GetRowHeader();
            string[] headers = new string[dataInput.Rows.Count];
            for (int i = 0; i < dataInput.Rows.Count; i++)
            {
                headers[i] = dataInput.Rows[i][0].ToString();
            }

            using (StreamWriter sw = new StreamWriter(filename))
            {
                string content;

                StringBuilder sb = new StringBuilder();

                sb.Append("//This file is generated by tools!").Append("\n");
                sb.Append("//Please do not modify this file!").Append("\n");
                sb.Append("public class Text {").Append("\n").Append("\n");


                for (int i = 0; i < headers.Length; i++)
                {
                    string header = headers[i];
                    if (header.Contains(" "))
                    {
                        header = header.Replace(' ', '_');
                    }
                    sb.Append("\tpublic const int " + header + " = " + i + ";").Append("\n");
                }

                sb.Append("\n");
                sb.Append("}");

                content = sb.ToString();
                sw.Write(content);
            }
        }
    }
}
